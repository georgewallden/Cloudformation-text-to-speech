AWSTemplateFormatVersion: '2010-09-09'
Description: |
  CloudFormation template for a Serverless Text-to-Speech API
  using API Gateway (HTTP API), Lambda, Amazon Polly, and S3.
# --- Parameters ---
Parameters:
  DeploymentBucket:
    Type: String
    Description: "The S3 bucket name where the Lambda deployment package (.zip) is stored. Example: my-lambda-code-bucket"
  DeploymentZipKey:
    Type: String
    Description: "The S3 object key (path/filename_COMMITSHA.zip) for the Lambda deployment package. Example: text-to-speech/v1.zip"
# --- Resources --- 
Resources:
  # --- S3 Bucket ---
  AudioBucket:
    Type: AWS::S3::Bucket
    Properties:
      VersioningConfiguration:
        Status: Enabled # Set status to Enabled to turn on versioning
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false      # Allow setting public ACLs (needed for public-read)
        IgnorePublicAcls: false     # Don't ignore public ACLs when evaluating access
        BlockPublicPolicy: false    # Allow public bucket policies (though we won't use one here)
        RestrictPublicBuckets: false # Allow public access if ACLs/policies permit it
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerPreferred
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - '*' # Allow any header
            AllowedMethods:
              - GET   # Allow reading files
              - HEAD  # Allow checking if files exist
            AllowedOrigins:
              - '*'   # Allow requests from any domain (WARNING: Restrict in production!)
            MaxAge: 3000
  # --- Lambda Function Execution Role---
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument: # Allows Lambda service to assume this role
        Version: '2012-10-17'  # Standard policy version identifier
        Statement:             # List of permission statements
          - Effect: Allow      # We are allowing this action
            Principal:         # Who is allowed?
              Service: lambda.amazonaws.com # The AWS Lambda service principal
            Action: sts:AssumeRole # What action are they allowed to do? Assume this role.
      Policies: # This is a list of inline policies attached to the role
        - PolicyName: LambdaBasicExecutionPolicy # A descriptive name for this specific policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: # List of permissions granted
                  - logs:CreateLogGroup # Allows creating log group if needed
                  - logs:CreateLogStream # Allows creating log stream within the group
                  - logs:PutLogEvents   # Allows writing log messages
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"
        - PolicyName: PollySynthesizePolicy # Name for this policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: polly:SynthesizeSpeech # Permission to generate speech
                Resource: '*'
        - PolicyName: S3PutObjectPolicy # Name for this policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject        # Allows uploading the file
                  - s3:PutObjectAcl     # Allows setting the Access Control List (to public-read)
                Resource: !Sub "arn:aws:s3:::${AudioBucket}/*"

  # --- Lambda Function ---
  SynthesizeSpeechFunction: # Base function definition
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-SynthesizeSpeechFunction"
      Runtime: python3.11
      Role: !GetAtt LambdaExecutionRole.Arn
      Handler: index.lambda_handler
      Environment:
        Variables:
          OUTPUT_BUCKET_NAME: !Ref AudioBucket
      Timeout: 30
      Code:
        S3Bucket: !Ref DeploymentBucket
        S3Key: !Ref DeploymentZipKey

  # --- Lambda Version ---
  SynthesizeSpeechVersion: 
    Type: AWS::Lambda::Version 
    Properties:
      FunctionName: !Ref SynthesizeSpeechFunction 
      Description: !Sub "Version published by stack ${AWS::StackName} for code: ${DeploymentZipKey}"

  # --- Lambda Alias ---
  SynthesizeSpeechLiveAlias: # Logical ID for the Alias resource
    Type: AWS::Lambda::Alias
    Properties:
      FunctionName: !Ref SynthesizeSpeechFunction # The base function this alias is for
      FunctionVersion: !GetAtt SynthesizeSpeechVersion.Version # Gets the most recent version of that function
      Name: live

  # # --- API Gateway Container ---
  # HttpApi: # This is the logical ID for our API resource
  #   Type: AWS::ApiGatewayV2::Api # Specifies we are creating an API Gateway v2 (HTTP API) resource
  #   Properties:
  #     Name: !Sub "${AWS::StackName}-TextToSpeechApi" # Give the API a descriptive name, unique per stack
  #     ProtocolType: HTTP # Choose HTTP API (vs WEBSOCKET)
  #     Description: API Gateway for Text-to-Speech Lambda function
  #     # Enable CORS settings directly on the API for browser access
  #     CorsConfiguration:
  #       AllowOrigins:
  #         - '*' # Allow requests from any origin (e.g., browser). WARNING: Restrict in production!
  #       AllowMethods:
  #         - POST    # Allow POST requests for sending text
  #         - OPTIONS # Allow OPTIONS requests (used by browsers for CORS preflight checks)
  #       AllowHeaders:
  #         # Allow common headers, including Content-Type needed for JSON body
  #         - Content-Type
  #         - '*' # Or allow all headers for simplicity during development
  #       MaxAge: 3000 # How long browser can cache CORS preflight response (seconds)

Outputs:
  AudioBucketName:
    Description: "Name of the S3 bucket storing generated audio files"
    Value: !Ref AudioBucket
  LambdaRoleArn:
    Description: "ARN of the Lambda execution role"
    Value: !GetAtt LambdaExecutionRole.Arn # Use !GetAtt to get the ARN attribute of the role
  LambdaFunctionName:
    Description: "Name of the SynthesizeSpeech Lambda function"
    Value: !Ref SynthesizeSpeechFunction
  LatestLambdaVersionArn:
     Description: "ARN of the latest published Lambda version created by this stack"
     Value: !Ref SynthesizeSpeechVersion # AWS::Lambda::Version ARN
  LiveLambdaAliasArn:
     Description: "ARN of the 'live' Lambda alias"
     Value: !Ref SynthesizeSpeechLiveAlias # AWS::Lambda::Alias ARN